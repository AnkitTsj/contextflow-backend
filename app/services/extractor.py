import google.generativeai as genai
import os
import json
import uuid
from datetime import datetime
from app.utils.chatparser import ChatParser

def extract_context(chat_text: str, keywords: str = ""):
    api_key = os.environ.get("API_KEY")
    if not api_key:
        return {"error": "Error: API key not configured."}

    genai.configure(api_key=api_key)

    chat_format = ChatParser.detect_format(chat_text)
    cleaned_chat = ChatParser.clean_chat(chat_text)
    style_hint = f"\nUser has requested emphasis on: {keywords}" if keywords else ""

    system_prompt = f"""
    Analyze this {chat_format} conversation and extract the most important context.

    Provide two outputs:

    1. **Summary (Markdown)** → a concise but comprehensive human-readable summary.
    2. **Memory (JSON)** → a structured memory object with this schema:

    {style_hint}

    {{
      "technical_info": [ "…" ],
      "decisions": [ "…" ],
      "research_findings": [ "…" ],
      "action_items": [ "…" ],
      "personal_context": {{
        "background": {{
            "stated": null,
            "inferred": "Familiar with programming but new to Python"
        }},
        "preferences": [ "…" ],
        "constraints": [ "…" ],
        "syntax_examples": [ "…" ],
        "conceptual_notes": [ "…" ],
        "user_request" : ["…"]
        }}
    }}

    # Ensure the JSON is valid and parseable.
    # """



    combined_prompt = system_prompt + "\n\nConversation:\n" + cleaned_chat

    try:
        model = genai.GenerativeModel('gemini-2.0-flash-lite')
        response = model.generate_content(combined_prompt)

        if response and hasattr(response, 'text'):
            text_output = response.text
        elif hasattr(response, 'candidates') and response.candidates:
            candidate = response.candidates[0]
            text_output = candidate.content.parts.text
        else:
            return {"error": "No content was generated by the model."}

        summary, memory_json = None, None
        if "```json" in text_output:
            parts = text_output.split("```json")
            summary = parts[0].strip()
            json_block = parts[1].split("```")[0].strip()
            try:
                memory_json = json.loads(json_block)
            except Exception:
                memory_json = {"error": "Invalid JSON returned from model"}
        else:
            summary = text_output
            memory_json = {}

        metadata = {
            "source": f"{chat_format.title()} conversation",
            "processed_chars": len(cleaned_chat)
        }
        

        return {
            "summary": summary,
            "memory": memory_json,
            "metadata": metadata
        }

    except Exception as e:
        return {"error": f"An error occurred during extraction: {e}"}

